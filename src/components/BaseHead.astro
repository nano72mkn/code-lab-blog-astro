---
import type { MetaDataType } from '@type';
import { ViewTransitions } from 'astro:transitions';
const origin = Astro.url.origin;

type Props = {
  title?: string;
  description?: string;
  slug?: string;
  appendMeta?: MetaDataType;
  ogImage?: string;
  isApp?: boolean;
};
const { title: titleProps, description: descriptionProps, slug, appendMeta, ogImage, isApp = false } = Astro.props;

const title = `${titleProps ? `${titleProps} | ` : ""}Code Lab Blog`;
const url = `${origin}${slug ? `/blog/${slug}` : ""}`;
const description =
  descriptionProps || "フロントエンジニア、@nano72mknの個人ブログ&実験サイト";
const ogpCardUrl = ogImage || `${origin}/og/${slug || "ogp"}.png`;
const isArticle = !!slug && !isApp;
---

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  
  <title>{title}</title>
  <meta name="description" content={description} />
  
  <link rel="shortcut icon" href="/favicon.ico" />
  <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
  <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
  <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
  
  <link rel="manifest" href="/site.webmanifest" />
  
  <!-- ogp -->
  <meta property="og:url" content={url} />
  <meta property="og:title" content={title} />
  <meta property="og:description" content={description} />
  <meta property="og:image" content={ogpCardUrl} />
  <meta property="og:type" content={isArticle ? 'article' : 'website'} />
  <meta property="og:site_name" content="code-lab" />
  
  <!-- twitter -->
  <meta name="twitter:card" content={isApp ? "summary_large_image" : "summary"} />
  <meta name="twitter:site" content="@nano72mkn" />
  
  <!-- hatena -->
  <link rel="author" href="http://www.hatena.ne.jp/nano72mkn/" />
  <ViewTransitions fallback="none" />

  <!-- Ads -->
  <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3796518837940513" crossorigin="anonymous"></script>

  {appendMeta && appendMeta.map((meta) => (
    <meta {...meta} />
  ))}
</head>
